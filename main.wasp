app wardstonepickban {
  wasp: {
    version: "^0.15.1"
  },
  title: "scoutahead.pro - League of Legends drafting tool with fearless mode",
  head: [
    "<meta name='description' content='League of Legends drafting tool with fearless mode, scrim blocks, and series support. Create custom draft lobbies for teams, coaches, and players.'>",
    
    "<meta property='og:url' content='https://scoutahead.pro'>",
    "<meta property='og:type' content='website'>",
    "<meta property='og:title' content='scoutahead.pro - League of Legends drafting tool with fearless mode'>",
    "<meta property='og:description' content='League of Legends drafting tool with fearless mode, scrim blocks, and series support. Create custom draft lobbies for teams, coaches, and players.'>",
    "<meta property='og:image' content='https://scoutahead.pro/banner.png'>",
    
    "<meta name='twitter:card' content='summary_large_image'>",
    "<meta property='twitter:domain' content='scoutahead.pro'>",
    "<meta property='twitter:url' content='https://scoutahead.pro'>",
    "<meta name='twitter:title' content='scoutahead.pro - League of Legends drafting tool with fearless mode'>",
    "<meta name='twitter:description' content='League of Legends drafting tool with fearless mode, scrim blocks, and series support. Create custom draft lobbies for teams, coaches, and players.'>",
    "<meta name='twitter:image' content='https://scoutahead.pro/banner.png'>",
    "<script defer data-domain='scoutahead.pro' src='https://plausible.io/js/script.js'></script>"
  ],
  auth: {
    userEntity: User,
    methods: {
      discord: {
        userSignupFields: import { getDiscordUserFields } from "@src/auth/user-signup-fields",
        configFn: import { getDiscordAuthConfig } from "@src/auth/user-signup-fields"
      },
    },
    onAuthSucceededRedirectTo: "/",
    onAuthFailedRedirectTo: "/login"
  },
  client: {
    rootComponent: import Root from "@src/root/RootPage",
    setupFn: import { setupClient } from "@src/lib/setup"
  },
  server: {
    setupFn: import { setupServer } from "@src/lib/setupServer"
  },
  webSocket: {
    fn: import { webSocketFn } from "@src/draft/webSocket",
    autoConnect: true
  }
}

//#region Routes
route RootRoute { path: "/", to: CreateSeriesPage }
route Profile { path: "/profile/:id", to: ProfilePage }
route LoginRoute { path: "/login", to: LoginPage }
route SignupRoute { path: "/signup", to: SignupPage }
route AdminDashboardRoute { path: "/admin", to: AdminDashboardPage }
route NotFoundRoute { path: "*", to: NotFoundPage }

// Draft Routes
route CreateSeriesRoute { path: "/draft/create", to: CreateSeriesPage }
route DraftRoute { path: "/draft/:seriesId/:gameNumber/:team?/:auth?", to: DraftPage }
route SpectatorDraftRoute { path: "/draft/:seriesId/:gameNumber", to: DraftPage }
// route AdminDashboardRoute { path: "/admin", to: AdminDashboardPage }

//#endregion

//#region Pages

page ProfilePage {
  component: import Profile from "@src/ProfilePage",
  authRequired: true,
}

page LoginPage {
  component: import { Login } from "@src/auth/auth",
}

page SignupPage {
  component: import { Signup } from "@src/auth/auth",
}

page NotFoundPage {
  component: import NotFound from "@src/404Page"
}

// Draft Pages
page CreateSeriesPage {
  component: import { CreateSeriesPage } from "@src/draft/pages/CreateSeriesPage"
}

page DraftPage {
  component: import { DraftPage } from "@src/draft/pages/DraftPage"
}

page AdminDashboardPage {
  component: import { AdminDashboardPage } from "@src/admin/AdminDashboardPage",
  authRequired: true
}
//#endregion

// Operations
query getSeries {
  fn: import { getSeries } from "@src/draft/operations/series.js",
  entities: [Series]
}

query getGame {
  fn: import { getGame } from "@src/draft/operations/series.js",
  entities: [Series, Game]
}

query getUserSeries {
  fn: import { getUserSeries } from "@src/draft/operations/series.js",
  entities: [Series]
}

action createSeries {
  fn: import { createSeries } from "@src/draft/operations/series",
  entities: [Series]
}
action updateGame {
  fn: import { updateGame } from "@src/draft/operations/games",
  entities: [Game, DraftAction, Series]
}

action createDraftAction {
  fn: import { createDraftAction } from "@src/draft/operations/draftActions",
  entities: [DraftAction, Game]
}

query getAdminStats {
  fn: import { getAdminStats } from "@src/admin/operations",
  entities: [User, Series, Game]
}

query getChampionsFromDb {
  fn: import { getChampionsFromDb } from "@src/draft/operations/champions.ts",
  entities: [Champion]
}

action updateCurrentUser {
  fn: import { updateCurrentUser } from "@src/root/operations",
  entities: [User]
}
job fetchChampionsJob {
  executor: PgBoss,
  schedule: {
    cron: "0 * * * *",
    args: {=json {} json=}
  },
  perform: {
    fn: import { fetchChampions } from "@src/server/jobs/champions.ts",
    executorOptions: {
      pgBoss: {=json { "retryLimit": 3 } json=}
    }
  },
  entities: [Champion]
}

